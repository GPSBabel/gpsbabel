name: "windows"
permissions: {}

on:
  push:
    branches: [ '**']
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [ master ]
  schedule:
    - cron: '27 4 * * 2'
  workflow_dispatch:
    inputs:
      attestation:
        description: 'Generate attestation for binary artifacts'
        required: false
        default: false
        type: boolean

jobs:

  windows:
    name: windows Build
    permissions:
      id-token: write
      contents: write
      attestations: write
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - QT_VERSION: '6.2.4'
            ARCH: 'amd64'
            HOST_ARCH: 'amd64'
            COMPILER: 'msvc2019_64'
            TOOLSET: 'v142,version=14.29.30133'
            METHOD: 'aqt'
            GENERATOR: 'Visual Studio 17 2022'
            RELEASE: false
            os: windows-2022
          - QT_VERSION: '6.2.4'
            ARCH: 'amd64'
            HOST_ARCH: 'amd64'
            COMPILER: 'msvc2019_64'
            METHOD: 'aqt'
            GENERATOR: 'Visual Studio 17 2022'
            RELEASE: false
            os: windows-2022
          - QT_VERSION: '6.5.3'
            ARCH: 'amd64'
            HOST_ARCH: 'amd64'
            COMPILER: 'msvc2019_64'
            METHOD: 'aqt'
            RELEASE: false
            GENERATOR: 'Ninja'
            os: windows-2022
          - QT_VERSION: '6.8.3'
            ARCH: 'amd64'
            HOST_ARCH: 'amd64'
            COMPILER: 'msvc2022_64'
            METHOD: 'aqt'
            RELEASE: true
            GENERATOR: 'Ninja'
            os: windows-2025
          - QT_VERSION: '6.8.3'
            TARGET_ARCH: 'arm64'
            HOST_ARCH: 'amd64'
            COMPILER: 'msvc2022_64'
            CROSS_COMPILER: 'msvc2022_arm64'
            METHOD: 'aqt'
            RELEASE: true
            os: windows-2025
          - QT_VERSION: '6.8.3'
            ARCH: 'arm64'
            HOST_ARCH: 'arm64'
            COMPILER: 'msvc2022_arm64'
            METHOD: 'aqt'
            RELEASE: false
            GENERATOR: 'Ninja'
            os: windows-11-arm

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Cache Qt
      uses: actions/cache@v4
      id: cache
      with:
        path: ~/Cache
        key: ${{ runner.os }}-${{ matrix.QT_VERSION }}-${{ matrix.COMPILER }}-${{ matrix.CROSS_COMPILER }}-${{ secrets.CACHE_VERSION }}

    - name: Install Qt setup(aqt)
      if: ( steps.cache.outputs.cache-hit != 'true' ) && ( matrix.METHOD == 'aqt' )
      uses: actions/setup-python@v5
      # aqt depends on pyppmd, which isn't supported on WoA as of pyppmd 1.1.1
      # force x64 python, which will run under emulation of WoA.
      with:
        python-version: '3.12'
        architecture: x64

    - name: Install Qt
      if: steps.cache.outputs.cache-hit != 'true'
      env:
        CI_BUILD_DIR: ${{ github.workspace }}
      shell: bash
      run: |
        if [ -n "${{ matrix.CROSS_COMPILER }}" ]; then
          ./tools/ci_install_windows.sh "${{ matrix.QT_VERSION }}" "${{ matrix.COMPILER }}" "${{ matrix.METHOD }}" "${{ matrix.CROSS_COMPILER }}"
        else
          ./tools/ci_install_windows.sh "${{ matrix.QT_VERSION }}" "${{ matrix.COMPILER }}" "${{ matrix.METHOD }}"
        fi

    - name: Install Inno Setup
      if: matrix.os == 'windows-2025'
      run: choco install innosetup 

    - name: Install legacy microsoft compiler
      if: matrix.TOOLSET == 'v142,version=14.29.30133'
      run: choco install visualstudio2022buildtools --package-parameters "--add Microsoft.VisualStudio.Component.VC.14.29.16.11.CLI.Support"

    - name: Build
      shell: pwsh
      run: |
        if ([string]::IsNullOrEmpty("${{  matrix.CROSS_COMPILER }}")) {
          .\tools\ci_setup_windows.ps1 -qtdir "$Home\Cache\Qt\${{ matrix.QT_VERSION }}\${{ matrix.COMPILER }}" -arch "${{ matrix.ARCH }}" -host_arch "${{ matrix.HOST_ARCH }}" -vcversion "${{ matrix.VCVERSION }}"
          .\tools\ci_script_windows.ps1 -generator "${{ matrix.GENERATOR }}" -arch "${{ matrix.ARCH }}" -toolset "${{ matrix.TOOLSET }}"
        } else {
          $hash = @{}
          $hash["qt_root_dir"] = "$Home\Cache\Qt\${{ matrix.QT_VERSION }}"
          $hash["host_arch"] = "${{ matrix.HOST_ARCH }}"
          $hash["target_arch"] = "${{ matrix.TARGET_ARCH }}"
          $hash["compiler"] = "${{ matrix.COMPILER }}"
          $hash["cross_compiler"] = "${{ matrix.CROSS_COMPILER }}"
          .\tools\ci_windows_cross_compile.ps1 @hash
        }

    - name: Rename
      shell: bash
      run: |
        VERSION_ID=$(date -u +%Y%m%dT%H%MZ --date=$(git show -s --format=%aI HEAD))-$(git rev-parse --short=7 HEAD)
        SETUP=$(ls bld/gui/GPSBabel-*-Setup-*.exe | sed "s/\([^-]*\)-\([^-]*\)-\(.*\)/\1-${VERSION_ID}-\3/")
        mv bld/gui/GPSBabel-*-Setup-*.exe ${SETUP}
        MANIFEST=$(ls bld/gui/GPSBabel-*-Manifest-*.txt | sed "s/\([^-]*\)-\([^-]*\)-\(.*\)/\1-${VERSION_ID}-\3/")
        mv bld/gui/GPSBabel-*-Manifest-*.txt ${MANIFEST}

    - name: Test
      shell: bash
      if: matrix.CROSS_COMPILER == ''
      run: |
        PNAME=./bld/gui/package/gpsbabel.exe GBTEMP=./gbtemp ./testo 2>&1
        PNAME=./bld/gui/package/gpsbabel.exe GBTEMP=./gbtemp ./test_encoding_utf8 2>&1

    - name: Generate artifact attestation
      if: ${{ inputs.attestation && matrix.RELEASE }}
      uses: actions/attest-build-provenance@v2
      with:
        subject-path: 'bld/gui/GPSBabel-*-Setup-*.exe'

    - name: Deploy
      # This only handles continous releases now, for other events artifacts may be saved in
      # the 'Upload Artifacts' step.
      if: ( github.event_name == 'push' ) && ( github.ref == 'refs/heads/master' ) && matrix.RELEASE
      shell: bash
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        RELEASE_NAME: Continuous-${{ runner.os }}
      run: |
        ./tools/uploadtool/upload_github.sh bld/gui/GPSBabel-*-Setup-*.exe

    - name: 'Upload Artifacts'
      uses: actions/upload-artifact@v4
      with:
        name: Windows_Installer-${{ join(matrix.*) }}
        path: |
          bld/gui/GPSBabel-*-Setup-*.exe
          bld/gui/GPSBabel-*-Manifest-*.txt
        retention-days: 7

  test_installer:
    name: 'Test Installer'
    needs: windows
    runs-on: windows-11-arm

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: 'Download Artifacts'
      uses: actions/download-artifact@v4
      with:
        path: bld
        pattern: Windows_Installer-*,arm64,amd64,msvc2022_64,msvc2022_arm64,aqt,true,windows-2025
        merge-multiple: true

    - name: 'Install Artifact'
      shell: pwsh
      run: |
        $install_path=Join-Path $(Get-Location) bld
        .\bld\GPSBabel-*-*-Setup-arm64.exe /SILENT /NORESTART /DIR="${install_path}" /LOG=bld\log.txt
        Start-Sleep -Seconds 60
        Get-ChildItem bld

    - name: 'Test Artifact'
      shell: bash
      run: |
        PNAME=./bld/gpsbabel.exe GBTEMP=./gbtemp ./testo 2>&1
        PNAME=./bld/gpsbabel.exe GBTEMP=./gbtemp ./test_encoding_utf8 2>&1
        ls -l bld

    - name: 'Upload Artifacts'
      uses: actions/upload-artifact@v4
      with:
        name: Test_Installer
        path: |
          bld/log.txt
        retention-days: 7

