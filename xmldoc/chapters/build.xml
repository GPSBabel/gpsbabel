<chapter xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="Getting_and_Building">
  <title>Getting or Building GPSBabel</title>
  <section xml:id="Download">
    <title>Downloading - the easy way.</title>
    <para>
GPSBabel is distributed "ready to run" on most common
operating systems via the
<link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://www.gpsbabel.org/download.html">download page</link>.
</para>
    <para> As GPSBabel runs on a wide variety of operating systems,
be sure to visit the
<link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://www.gpsbabel.org/osnotes.html">OS-Specific notes</link> for
additional information.
</para>
  </section>
  <section xml:id="Source">
    <title>Building from source.</title>
    <para>
For operating systems where no binary is provided, or if
you want the latest development version, you will have to build it from
source.  The code should be compilable on any system with
ISO C++17. It's tested on Ubuntu, macOS, and Windows.
Less frequently, someone will build on FreeBSD, OpenBSD, Solaris,
etc.  Clang/LLVM, GNU C++, and MSVC are regularly exercised via automation.
</para>
    <para>
You can grab a release from the <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://www.gpsbabel.org/download.html">GPSBabel download page</link>, but if you're going to be doing any development, you'll find that working from the <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://github.com/gpsbabel/gpsbabel">GPSBabel Github repo</link> is easier. Checkouts via Git, HTTPS, SSH, and Subversion are supported.
</para>
    <para>There are external requirements for building.</para>
    <variablelist>
      <varlistentry>
        <term>
          <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://contribute.qt-project.org/">Qt</link>
        </term>
        <listitem>
          <para>
Qt version 6.2 or newer is required for all builds.
You may download directly from Qt using the <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://doc.qt.io/qt-6/get-and-install-qt.html">Qt supplied directions</link>.
Alternatively, macOS users can download binaries from <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://formulae.brew.sh/formula/qt">Homebrew</link>.
Fedora or CentOS users may need to 'dnf install qt6-qtbase-devel qt6-qt5compat-devel'.  When in doubt, 'dnf search qt' or 'dnf search qt6' may help you find the correct package name. Ubuntu users may need to 'apt-get install qt6-base-dev qt6-5compat-dev'. Additional qt6 packages are required to build the GUI.  Package names
and versions in Linux frequently change, so you may need to ask your Linux vendor
for help or look in our <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://github.com/GPSBabel/gpsbabel/tree/master/tools">Docker files</link> for inspiration from our automated builds that
use Docker.
  </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://libusb.info/">libusb 1.0</link>
        </term>
        <listitem>
          <para>
is needed to communicate with use with older USB Garmins.
For macOS, we use an included copy.
Fedora users may need to 'dnf install libusb1-devel'.  Ubuntu users may
need to 'apt-get install libusb-1.0-0-dev' or look in tools/Docker* for inspiration
from our automated Docker builds.</para>
        </listitem>
      </varlistentry>
    </variablelist>
    <section xml:id="Internal_History">
      <title>Brief history of internals</title>
      <para>
    Parts of GPSBabel have been public since 2002, with some of the original
    design and original code came from 2001. It was originally in C89, not C++,
    and while we strongly encourage modern C++ code where we can use it, we've
    not gone back to those older formats - some of which we don't have
    the hardware to test and have fallen out of touch with original authors - and
    rewritten them in Modern C++ style. There are this void*'s everywhere, C String
    use, gross buffer abuse, and other things that look more like a C program from the 80's than a C++ program of modern date.  Code that's earned its own wings can
    continue to fly with us as long as it passes the tests we have. We've additionally
    not enforced style rules as strongly across modules as we could have. Fixing
    both of these is a goal for us in 2020.
  </para>
    </section>
    <section xml:id="Qt">
      <title>Building with Qt Creator</title>
      <para>
Qt provides a lovely IDE (Integrated Development Environment) with an
editor and debugger. Its use is strongly encouraged for those new to C++.
Once you have Qt correctly installed, just opening the <filename>
CMakeLists.txt</filename> from
the File-&gt;Open menu in an already-running instance of <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://www.qt.io/development-tools">Qt Creator</link> is the fastest and easiest way for most
people to get to development because it handles things like build dependencies
changing and class and method compilation.
  </para>
  <para>
A path of low resistance for some users is to use the CMakeLists.txt file
from the command line.  If you type <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://cmake.org/cmake/help/latest/">cmake .</link> in our working
directory it will create a buildsystem with the default generator (Unix Makefiles or Visual Studio) which you can use for development.
  </para>
    </section>
    <section xml:id="cmake">
      <title>Building from the command line</title>
      <para>
Those familiar with the command line may be more comfortable using cmake from the command line.
It is important to set the CMAKE_BUILD_TYPE when generating a build system with single configuration generators such as Unix Makefiles and Ninja.
With multi-configuration generators such as Visual Studio and Xcode the build type is selected at build time instead of when generating the build system.
      </para>
      <simplelist>
        <member>
To create a buildsystem using Ninja:
<userinput>cmake -G Ninja -DCMAKE_BUILD_TYPE=Release .</userinput>
</member>
        <member>
To create a Visual Studio project that can be built with msbuild:
<userinput>cmake -G "Visual Studio 17 2022" .</userinput>
</member>
        <member>
To create an Xcode project:
<userinput>cmake -G Xcode .</userinput>
</member>
      </simplelist>
      <para>
      </para>
      <para>
There are additional variables that can be defined cmake on the cmake command line to
customize your build of GPSBabel.
      </para>
      <variablelist>
        <varlistentry>
          <term>GPSBABEL_WITH_LIBUSB = no|pkgconfig|system*|included*|custom</term>
          <listitem>
            <para>note that libusb is NOT used on windows.</para>
            <variablelist>
              <varlistentry>
                <term>no</term>
                <listitem>
                  <para>build without libusb-1.0.  functionality will be limited.</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>pkgconfig</term>
                <listitem>
                  <para>build with libusb-1.0 found by pkg-config.</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>system</term>
                <listitem>
                  <para>
build with libusb-1.0 found on the system library path and under
libusb-1.0 on the system include path (default, linux, openbsd).
	  </para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>included</term>
                <listitem>
                  <para>build with libusb-1.0 included with gpsbabel (default, macOS only).</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>custom</term>
                <listitem>
                  <para>
build with user supplied libusb-1.0.  LIBS and INCLUDEPATH may need to
be set with GPSBABEL_EXTRA_LINK_LIBRARIES and GPSBABEL_EXTRA_INCLUDE_DIRECTORIES.
			</para>
                </listitem>
              </varlistentry>
            </variablelist>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>GPSBABEL_WITH_SHAPELIB = no|pkgconfig|included*|custom</term>
          <listitem>
            <variablelist>
              <varlistentry>
                <term>no</term>
                <listitem>
                  <para>build without shapelib.  functionality will be limited.</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>pkgconfig</term>
                <listitem>
                  <para>build with shapelib found by pkg-config.</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>included</term>
                <listitem>
                  <para>build with shapelib included with gpsbabel (default).</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>custom</term>
                <listitem>
                  <para>
build with user supplied shapelib.  LIBS and INCLUDEPATH may need to
be set with GPSBABEL_EXTRA_LINK_LIBRARIES and
GPSBABEL_EXTRA_INCLUDE_DIRECTORIES.</para>
                </listitem>
              </varlistentry>
            </variablelist>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>GPSBABEL_WITH_ZLIB = no|pkgconfig|included*|custom</term>
          <listitem>
            <variablelist>
              <varlistentry>
                <term>no</term>
                <listitem>
                  <para>build without zlib.  functionality will be limited.</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>pkgconfig</term>
                <listitem>
                  <para>build with zlib found by pkg-config.</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>included</term>
                <listitem>
                  <para>build with zlib included with gpsbabel (default).</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>custom</term>
                <listitem>
                  <para>
build with user supplied zlib. LIBS and INCLUDEPATH may need to
be set with GPSBABEL_EXTRA_LINK_LIBRARIES and
GPSBABEL_EXTRA_INCLUDE_DIRECTORIES.</para>
                </listitem>
              </varlistentry>
            </variablelist>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>GPSBABEL_MAPPREVIEW</term>
          <listitem>
            <para>
This options enables the map preview feature.  With the feature disabled
QtWebEngine and QtWebEngineWidgets are not used. Note that QtWebKit and
QtWebKitWidgets are no longer supported.
	</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>GPSBABEL_EMBED_MAP</term>
          <listitem>
            <para>
Embed gmapbase.html for map preview.  When using this option gmapbase.html
will be compiled into the executable and does not need to be distributed.
	</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>GPSBABEL_EMBED_TRANSLATIONS</term>
          <listitem>
            <para>
Embed translations.  When using this option the gpsbabel provided
translations will be compiled into the executable and do not need to be
distributed. The Qt provided translations still need to be distributed.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>GPSBABEL_ENABLE_PCH</term>
          <listitem>
            <para>Enable precompiled headers when building the target gpsbabel.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>GPSBABEL_EXTRA_COMPILE_OPTIONS</term>
          <listitem>
            <para>Extra compile options when building the target gpsbabel.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>GPSBABEL_EXTRA_INCLUDE_DIRECTORIES</term>
          <listitem>
            <para>Extra directories to include when building the target gpsbabel.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>GPSBABEL_LINK_LIBRARIES</term>
          <listitem>
            <para>Extra libraries to link when building the target gpsbabel.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>GPSBABEL_LINK_OPTIONS</term>
          <listitem>
            <para>Extra link options when building the target gpsbabel.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>GPSBABEL_DOCVERSION</term>
          <listitem>
            <para>
string appended to documentation location for www.gpsbabel.org.  The default
value is the version string, e.g. "1.7.0".  This is used by the gpsbabel.org
target, you are unlikely to need it unless you are maintaining
www.gpsbabel.org.
</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>GPSBABEL_WEB</term>
          <listitem>
            <para>
Path where the documentation will be stored for www.gpsbabel.org.  This is
used by the gpsbabel.org target, you are unlikely to need it unless you are
maintaining www.gpsbabel.org.  The default location is "gpsbabel.org".
</para>
          </listitem>
        </varlistentry>
      </variablelist>
      <para>
Additional targets are available for special purposes.
</para>
      <variablelist>
        <varlistentry>
          <term>check</term>
          <listitem>
            <para>Run the basic test suite.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>check-vtesto</term>
          <listitem>
            <para>Run valgrind memcheck.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>gpsbabel</term>
          <listitem>
            <para>Build the command line tool.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>gpsbabel.hmtl</term>
          <listitem>
            <para>Create the html documentation.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>gpsbabel.org</term>
          <listitem>
            <para>Create documentation for use on www.gpsbabel.org.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>gpsbabel.pdf</term>
          <listitem>
            <para>Create the pdf documentation.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>package_app</term>
          <listitem>
            <para>
Collect the components for distribution.
On Linux the gpsbabel generated components will be under
gui/GPSBabelFE, any dynamically linked required libraries are not included.
On macOS an app bundle will be created at gui/GPSBabelFE.app and an apple disk
image will be created at gui/GPSBabelFE.dmg.
On windows an image will be created in the directory gui/package, and an
installer will be created gui/Setup-x.y.z-Setup.exe.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>
    <section xml:id="Runtime_Dependencies">
      <title>Runtime Dependencies:</title>
      <para>
On non-macOS unix builds by default we now compile in the gpsbabel generated
translation files, i.e. gpsbabelfe_*.qm, gpsbabel_*.qm, as well as
gmapbase.html.  When compiled in these files do not need to be distributed.
These are used by the GUI.  Additional translation files from Qt will also be
used if they are found.  They may be in a package such as qt6-translations-l10n.
      </para>
    </section>
  </section>
</chapter>
