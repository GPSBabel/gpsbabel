   <chapter id="Usage">
      <title>Usage</title>
      <sect1 id="Invocation">
         <title>Invocation</title>
         <para>Invocation was meant to be flexible.  Unfortunately,
         that can sometimes lead to unwieldy command lines.</para>

<para>
If you're using GPSBabel, you will need to know how to do at least two things:
read data from a file, and write it to another file.  There are four basic
commands you need to know to do those things:
</para>
<segmentedlist>
<?dbhtml list-presentation="table"?>
<segtitle>Command</segtitle>
<segtitle>Meaning</segtitle>
<seglistitem>
  <seg><option>-i</option> <parameter class="command">format</parameter></seg>
  <seg>Set input format</seg>
</seglistitem>
<seglistitem>
  <seg><option>-f</option> <parameter class="command">filename</parameter></seg>
  <seg>Read file</seg>
</seglistitem>
<seglistitem>
  <seg><option>-o</option> <parameter class="command">format</parameter></seg>
  <seg>Set output format</seg>
</seglistitem>
<seglistitem>
  <seg><option>-F</option> <parameter class="command">filename</parameter></seg>
  <seg>Write output File</seg>
</seglistitem>
</segmentedlist>

<para>
The <parameter class="command">format</parameter> parameters in the above list
refer to the names of formats or file types supported by GPSBabel. 
</para>
<screen format="linespecific">gpsbabel -? </screen>
<para>will always show you the supported file types.  In this document, the
various supported formats are listed in <xref linkend="The_Formats" />.  The 
name that you would use on the command line follows the format name in 
parentheses.
</para>
<para>
The <parameter class="command">filename</parameter> parameters specify the 
name of a file to be read or written.
</para>

<para>To use
         this program, just tell it what you're reading, where to read
         it from, what you're writing, and what to write it to.  For
         example:</para>
         <screen format="linespecific">gpsbabel -i geo -f /tmp/geocaching.loc -o gpx -F /tmp/geocaching.gpx</screen>
         <para>tells it to read the file "/tmp/geocaching.loc" in geocaching.com
         format and create a new file in GPX format.</para>
         <para> This command will read from a Magellan unit attached
         to the first serial port on a Linux system (device names will
         vary on other OSes) and write them as a geocaching loc file.
         The second command does the same on Microsoft Windows.</para>
         <screen format="linespecific">gpsbabel -i magellan -f /dev/ttyS0 -o geo -F mag.loc</screen>
         <screen format="linespecific">gpsbabel -i magellan -f com1 -o geo -F mag.loc</screen>
         <para>Optionally, you may specify <parameter moreinfo="none">"-s"</parameter> in any command line.  This
         causes the program to ignore any "short" names that may be
         present in the source data format and synthesize one from the
         long name.  This is particularly useful if you're writing to
         a target format that isn't the lowest common denominator but
         the source data was written for the lowest common
         denominator.  I use this for writing data from geocaching.com
         to my Magellan so my waypoints have "real" names instead of
         the 'GC1234' ones that are optimized for NMEA-only receivers.
         A geocacher with a Magellan receiver may thus find commands
         like this useful.</para>
         <screen format="linespecific"> gpsbabel -s -i geo -f geocaching.loc -o magellan -F /dev/ttyS0  </screen>
	<screen format="linespecific"> gpsbabel -s -i geo -f geocaching.loc -o magellan -F com1</screen>
      </sect1>
      <sect1 id="Advanced_Usage">
         <title>Advanced Usage</title>
         <para>Argument are processed in the order they appear on the command
line and are translated internally into a pipeline that data flows
through when executed. Normally one would: </para>
         <simplelist type="vert">
            <member>read from one input</member>
            <member>optionally apply filters </member>
            <member>write into one output</member>
         </simplelist>
         <para> but GPSBabel is flexible enough to allow more complicated
operations such as reading from several files (potentially of
different types), applying a filter, reading more data, then write the
merged data to multiple destinations.
</para>
         <para>The input file type remains unchanged until a new
         <parameter moreinfo="none">-i</parameter> argument is seen.
         Files are read in the order they appear. So you could merge
         three input files into one output file with: </para>
         <screen format="linespecific">gpsbabel -i geo -f 1.loc -f 2.loc -f 3.loc -o geo -F big.loc</screen>
         <para>You can merge files of different types:</para>
         <screen format="linespecific">gpsbabel  -i geo -f 1.loc -i gpx -f 2.gpx -i pcx 3.pcx \ 
-o gpsutil -F big.gps</screen>
         <para> You can write the same data in different output formats:</para>
         <screen format="linespecific">gpsbabel -i geo -f 1.loc -o gpx -F 1.gpx -o pcx 1.wpt</screen>
         <para>If you want to change the character set of input or/and
         output side you can do this with the option <option>-c
         &lt;character set&gt;</option>. You can get a complete list
         of supported character sets with "gpsbabel -l".  To change
         the character set on both sides you should do this:</para>
         <screen format="linespecific">gpsbabel -i xcsv,style=foo.style -c latin1 -f foo  \
	         -o xcsv,style=bar.style -c ms-ansi -F bar</screen>
         <para>Note, that some formats has a fixed character set and ignore this option.</para>
      </sect1>
      <sect1 id="Route_And_Track_Modes">
         <title>Route and Track Modes</title>
         <para> Most formats will make reasonable attempt to work
         transparently with waypoints, tracks, and routes.  Some
         formats, like 'garmin' and 'magellan' require the <parameter moreinfo="none">-t</parameter> flag to work with tracks and
         <parameter moreinfo="none">-r</parameter> to work with
         routes. <parameter moreinfo="none">-w</parameter> is for
         waypoints, and is the default. So if you wanted to read all
         data from your unit into a gpx file, you might use a command
         like:</para>
         <screen format="linespecific"> gpsbabel -t -r -w -i magellan -f com1:  -o gpx -F backup.gpx</screen>
         <para> Tracks and routes are advanced features and don't try
         to handle every possible hazard that can be encountered
         during a conversion.  If you're merging or converting files
         of similar limitations, things work very well.</para>
         <para> Tracks and routes will sometimes be converted to a
         list of waypoints when necessary, f.i. when writing into one
         of the CSV formats. The inverse operation is not supported
         right now, so reading the converted track back from CSV will
         always result in a list of waypoints, not the original track.
</para>
         <para> The presence of <parameter moreinfo="none">-s</parameter> on the command line tends to
         creats havoc on tracks and routes since many of these formats
         rely on internal linkages between such points and renaming
         them may break those linkages.  In general, don't use
         <parameter moreinfo="none">-s</parameter> when tracks or
         routes are present.
</para>
</sect1>
<sect1 id="inifile">
  <title>Working with predefined options</title>
    <para>
      GPSBabel can read a file on startup to set defaults for options. All
      module and filter options may be set this way. 
    </para>

    <para>
      The format of the file is identical to the inifile-format often seen 
	on Windows.  Here is an example:
    </para>
<!--I don't know what the best "DOCbook-ese" is for this, but it's probably
  not a simplelist... rjl -->
    <simplelist columns="1">
      <member>[Common format settings]</member>
      <member>snupper=Y</member>
      <member>snlen=10</member>
      <member>[gpx]</member>
      <member>gpxver=1.1</member>
      <member>[magellan]</member>
      <member>baud=115200</member>
      <member>[tiger]</member>
      <member>[Garmin categories]</member>
      <member>0=fixed waypoints</member>
      <member>1=temporary waypoints</member>
    </simplelist>
    <para>
      Each section of the file starts with a '[section]' header followed by any
      number of lines formatted option=value. Leading and trailing whitespace
	will be
      automatically removed from header, option and value items. 
<!--Are there any other lines? If not, why name them?  rjl -->
      Lines starting 
      with '#' or ';' will be treated as comments and ignored.
    </para>

    <para>
	There are three optional sections.
	<itemizedlist>
	<listitem>
	<para>"Common format settings"</para>
	<para>  Any option from any of the formats listed here will be used by
		GPSBabel unless explictly provided on the command line.
	</para>
	</listitem>
	<listitem>
	<para>"Common filter settings"</para>
	<para>As above, but for filters.</para>
	</listitem>
	<listitem>
	<para>Garmin categories</para>
	<para>This allows you to give readable names to the numeric categories
	used internally in some Garmin devices and the Mapsource formats
	such as GDB and MPS.  This is information is also used by our GPX 
	and garmin_txt formats as well.</para>
	</listitem>
      </itemizedlist>
    </para>

    <para>
      By default, GPSBabel tries at startup to load the file named 
	<filename>gpsbabel.ini</filename> from the following locations:
    </para>
    <itemizedlist>
      <listitem><para>current working directory</para></listitem>
      <listitem><para>Windows: all paths "APPDATA", "WINDIR", "SYSTEMROOT" declared in environment.</para></listitem>
      <listitem><para>Unix like OS'ses: <filename>${HOME}/.gpsbabel/</filename>, <filename>/usr/local/etc/</filename> and <filename>/etc/</filename></para></listitem>
    </itemizedlist>
	<para>
      If the <option>-p</option> option is specified, the above locations are not searched.
      Only the filename specified by that option will be used.
	</para>
    <para>
      There may be situations where predefined values are not useable 
      (i.e. wrapper applications using GPSBabel in the background). 
       The inifile mechanism can be disabled with an empty filename.
    </para>
    <screen format="linespecific">gpsbabel -p "" -i gpx -f something.gpx -o tiger -O -</screen>
</sect1>
</chapter>
