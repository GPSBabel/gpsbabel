
THE PROBLEM

	There are simply too many gratituosuly different file formats to 
	hold waypoint and route information in various programs used by 
	computers.  GPX (http://www.topografix.com/gpx.asp) attempts to 
	define a standard in XML to contain all the data, but there are 
	too many programs that don't understand it yet and too much data 
	that are in an alternate format.

THE SOLUTION

	I needed to convert waypoints between a couple of formats, so
	I whipped up a converter and based it on an extensible foundation
	so that it was easy to add new formats.  Most file formats added
	so far have taken under 200 lines of reasonable ISO C so they can
	be stamped out pretty trivially. 

BUILDING IT
	
	The code should be compilable on any system with ISO C89 compilers.
	It's been tested on UnixWare, OpenServer, OS/X, Linux, Solaris, and
	a variety of processors and compilers.
	
	Libexpat is required.   If you get errors about expat.h being
	missing, you must either edit the Makefile to tell the compiler
	where it is or install it in a sensible place.   Exapt can be 
	downloaded from http://expat.sourceforge.net and is part of Apache
	so it's very portable.

THE FORMATS

    GPX

	This is the most capable and expressive of all the file formats
	supplied.    It is described at http://www.topografix.com/gpx.asp
	and is supported by EasyGPS, ExpertGPS, and man other programs
	described at http://www.topografix.com/gpx_resources.asp

    GEO

	geocaching.com spits up geocaching.loc files that are XML-ish but
	not quite GPX.   Becuase it's so close to GPX, this format is very
	well supported.

    MAGELLAN

	Waypoint serial upload and download works reliably to the 315, 330, 
	Meridian, and SportTrak family.  I expect it to work on any modern
	Magellan unit.

	As of 08/30/02, gpsbabel can also read and write the files that
	can be stuck on the flash memory parts for the Meridian models.
	Simply specify a file instead of a serial port.

	As of this writing, there is still a lot of "scribbling" in the 
	source for functionality that isn't hooked up to the rest of the
	program.    Communication errors are handled and verification of
	data is turned on.

	Additional options:
	baud: may be 1200, 2400, 4800, 9600, 19200, but must match receiver.

    GARMIN

	Waypoint serial upload and download works reliably under both
	POSIX and Windows.   I tested it with a Vista graciously provided
	on loan by Joe Armstrong.   The communications library used, jeeps,
	claims to support most models of Garmin hardware.   Be sure the GPS 
	is set for "Garmin mode" in setup and that nothing else (gpsd, getty,
	pppd, etc.) is using the serial port.
	
    GPSMAN

	GPS Manager can read and write formats that this converter doesn't
	understand.  The default formats (WGS84, DDD) work reliably.

    GPSUTIL

	GPSUtil has a simple file format of this program that runs on POSIX-
	compliant OSes like UNIX and Linux.   Reads and writes of this format
	are reliable.   (I've also contributed to this program.)  It's 	
	available at http://www.cs.uakron.edu/~hennings/gpsutil/.

    TIGER

	The U.S. Census Bureau proives online mapping facilities.  This
	format is described at: http://tiger.census.gov/instruct.html.

    CSV

	There are a billion variants of Comma Separated Value data.  This
	is the one that makes Delorme S&A Deluxe 9 happy.

    XMap

	Delorme TopoUSA/XMap Conduit is one of the billion CSV variants 
	mentioned above.  It's just like S&A with the addition of a 
	completely pointless line at the beginning and end of the file.   
	This is the format used to hot-sync to XMap from withing TopoUSA.
	Done with help of Dan Edwards.

    XMapWpt

	Delorme XMapHandHeld Street Atlas USA is another of the billion 
	CSV variants.  This is the format used by XmapHH SA USA on
	(at least) PocketPC O/S.  Please see README.xmapwpt for more 
	information on it's intricacies.  This XMap is not to be confused
	with the XMap mentioned above. Contributed to gpsbabel by
	Alex Mottram.

    XCSV

	XCSV is an open-ended "Whatever Separated Values" parser / writer
	designed to work with user-supplied "style" files.  It should handle 
	at least a few thousand of the billion CSV variants available.  
	By itself, it doesn't comply to any format, however *most* CSV 
	variants can be described as a "style" and fine-tuned by the end 
	user.  For more information on it's use, please see README.style 
	in the style/ sub-directory of gpsbabel.  For an example of using 
	the XCSV module within your C program, look at the ozi.c, mxf.c, and
	xmapwpt.c sources in the gpsbabel directory.  This module was 
	contributed to gpsbabel by Alex Mottram.

	Additional Options:
	style	-	**REQUIRED** Path to XCSV style file.

	snlen	-	Maximum length of synthesized shortnames. 
	snwhite	-	Switch defining whether or not to allow whitespace
			in synthesized shortnames. 
			(0 = NO WHITESPACE, 1 = WHITESPACE OK).
	snupper	-	Switch defining whether or not to force uppercase 
			in shortnames. (0 = LEAVE AS IS, 1 = UPPERCASE ALL).
	
	NOTE:	sn* options require use of the '-s' command line option.

	Example Usage:
	gpsbabel -i xcsv,style=foo.style -f foo -o xcsv,style=bar.style -F bar
	gpsbabel -s -i gpx -f foo.gpx -o xcsv,style=my.style,snlen=8 -F bar

    MAPSEND

	Magellan was smart enough to document their file format to make
	creating software like this possible.

    MAPSOURCE

        Garmin Mapsource format appears compatible with the various
        members of that product family.  Icon mapping is oriented toward
        versions above 4.07.  Altitude is supported, but proximity, and 
	depth are not.   Naming files *.mps will allow file->open in 
	Mapsource to find the files more easily.   Versions 3, 4 and 5 
	of the Mapsource data format are handled automatically on input 
	and by default the output is version 3 for maximum compatibility.  
	Waypoints and tracklogs are handled, but routes are "work in 
	progress" - maps are ignored.

        Information on the Garmin Mapsource format was provided by Ian
        Cowley and Mark Bradley.  The code was implemented by Robert Lipe
	and Mark Bradley.

	Additional options:
	  snlen -        set the length of generated shortnames
	  mpsverout -    set the data format version of the output file
			(3,4 or 5)

    PCX

        Garmin documents only PCX5, an older format limited to the
        lame NMEA six-character waypoint names that's treated as a
        second-class citizien in current versions of MapSource.  In
        Mapsource, use file->import to read these files.  If you name
	the files *.wpt, Mapsource will find them easier.

        In general, you should prefer the "mapsource" file format to
        this one.

    CETUS

	Cetus GPS (http://www.cetusgps.dk/) is a program for Palm/OS.  
	Working with Ron Parker and Kjeld Jensen, we can now read and write
	files for that program.   It hasn't been exhaustively tested, but 
	has seemed fine on every input and output we've tried.

    QUOVADIS

	QuoVadis for Palm OS (http://www.marcosoft.com/) is a program
	for Palm/OS. Working with record definitions provided by
	MarcoSoft and further experimentation by Bruce Thompson and
	"Fuzzy" from the Geocaching Forums to nail down the format
	precisely.

	Should work fine for import and export.

	One thing of note, QuoVadis stores all waypoints in a single
	Palm Database without using categories. This means that it may
	be difficult to keep personal waypoints separate from
	generated waypoints. What Bruce recommends is taking the
	QuoVadisMarkerDB.PDB file synced down from your Palm Powered
	device and extract the waypoints you personally set to a GPX
	file. Then using GPSBabel's joining capabilities generate a
	new PDB file from the personal file and the other waypoint
	files of interest.

	Currently the selection of icons to display and the scale at
	which to display them is hardcoded. Also there is no support
	for notes associated with waypoints. This will be addressed in
	a future revision.

    GPSPILOT

	The file format for GPSPILOT (http://www.gpspilot.com) was provided
	by Ron Parker.  The output from this module has been tested with 
        GPSPilot Tracker v5.05sx, but it is based on reverse-engineering
        so it may not work with all versions of all GPSPilot products.
	It had read-only support for Airport, Navaid, City and Landmark 
	files but will read and write Point files.

    MAGNAV

        Magellan NAV Companion for Palm/OS is not really designed for this 
        sort of use, but its file format is supported and with a little bit
        of patience you can both read and write NAV Companion waypoints.
        Please read README.magnav for further tips on getting waypoints
        in and out of NAV Companion.  This conversion is based on partially
        incomplete reverse-engineering of the record format, so it may not
        work with all versions of NAV Companion.  It has been tested with 
        version 2.10.
	
    PSP

	Microsoft's PocketStreets 2002 Pushpin (.PSP) format is not yet 
	completely documented.  THE .PSP MODULE DOES NOT WORK WITH MS 
	STREETS & TRIPS 2002 .EST FILES.  To create .PSP files from 
        Streets & Trips 2002, you will need to have PocketStreets support 
	installed.  Please note that MS Streets & Trips only *EXPORTS* 
	.PSP files. It does not import them.  MS Streets & Trips 2002 
	only imports CSV files.  To use .PSP files, simply copy them 
	over to the same folder on the mobile device as the map (.MPS), 
	and open PocketStreets.  It should also be noted that in the case 
	a pushpin is outside of the exported map area, the pin will be 
	"grayed-out" and unused in PocketStreets.  This is a good thing 
	as it allows us to create one big .PSP file that covers multiple 
	.MPS files.  Unfortunately, you need one .PSP file for every 
	.MPS file. :(

    MXF

        Maptech Exchange Format - Another CSV format file.  This format
        complies with (at least) Maptech Terrain Navigator, Terrain
        Professional, Take a Hike, and ExpertGPS import/export MFX.
        Contributed by Alex Mottram.

    DNA

	Navitrak DNA marker format - Another CSV format file.
	This is the format that is compatible with the DNA Desktop
	import/export command.  Reading the binary Markers.jwp 
	format directly off the data card is not supported yet.
	Contributed by Tim Zickus.

    OZI

        OziExplorer Waypoint Format - Another CSV format file.  Tested
        against OziExplorer v 3.90.3a / Shareware.  Contributed by Alex
        Mottram.

    TPG

	National Geographic Topo! Waypoint Format.  This filter 
	reads and writes .TPG files created by various editions of NG Topo! 
	This filter will *not* work with the newer combined .TPO files.  
	Contributed by Alex Mottram.

    HOLUX

        The Holuxgm-100 (e-fox) gps receiver uses standard compact
        flash cards.  File formats were provided by Holux-Taiwan
        http://www.holux.com.tw to the author.  The code was tested
        against version 2.27E1; other versions and receivers may
        work but have not been explictly tested.  Anyone with
        information on other Holux receivers is encouraged to contact
        jochen@bauerbahn.net.

        When copying the .wpo file to a flash card, the file must be
        named "tempwprt.wpo" as the receiver will ignore all other
        files.

        Comparing the waypoints of a .wpo files against other formats
        like .gpx you may notice a small difference in the latitude
        and longitude values.  The reason is the low resolution of
        the coordinates in the wpo file format.  In a .wpo file the
        reolution is 1/10"; in gpx for example it is 1/100".  A a practical
	matter, this loss is only about 1.7meters (5 feet).


        The generated waypoint failes can also be used by MapShow
        version 1.14.  This program is free of charge from the Holux web
        site.

        This format was contributed by Jochen Becker.

    TMPRO

        TopoMapPro Places File.  Reads and writes places files for use
        in TopoMapPro (http://www.topomappro.com).  As this file type
        can store links other than web links, anything that is not a
        http url will be discarded.  Note that this does not do datum
        conversions, so if your input file does not have WGS84/NZGD2000
        data, your output file won't either.
        Colour of waypoint icons defaults to red.

    GPSDRIVE
  
        GpsDrive way.txt file format. A space seperated format file. Tested
        against GpsDrive v 1.30 found @ http://www.kraftvoll.at/software.
        Contributed by Alan Curry.

    Geocaching DB

	This is a PDA file format.    It was tested against version 2
	of GeocachingDB and a development snapshot of version 3.  
	Information on the file format came from Dougs Brat and Ron Parker.
	A particularly handy way to use GPSBabel on these files is to use
	GPSBabel to read a GPX file with Groundspeak  (geocaching.com) 
	extensions and let it write you a GeocachingDB file that contains
	the cache names, difficulty, terrain, and such.

	http://vip.hyperusa.com/~dougs/geocachingdb/geocachingdb.htm

    CoPilot

        This code is mostly intended to convert CoPilot Flight Planner
        for Palmd/OS atabases into other formats.  You probably should
        not use this to write CoPilot databases, although the code is
        there, because GPSBabel doesn't convert magnetic declination
        values.

        Questions, bug reports, etc, to ptomblin at xcski.com


	http://xcski.com/~ptomblin/CoPilot/
	http://navaid.com/CoPilot/

    EasyGPS

        This is the binary file format used by EasyGPS.  This format is
        seemingly being phased out in favor of GPX in newer versions of
        EasyGPS, but this allows conversions to and from the old binary
        .loc format.

	http://www.easygps.com/

        Information about and sketchy code to implement this file format
        were provided by Eric Cloninger.

    GpilotS

    	This is a Palm/OS file format ofr GPilotS.   It was tested against
	version 6.2.

	http://www.cru.fr/perso/cc/GPilotS/

	Neither tracks nor routes are supported at this time.

    s_and_t

	This is a CSV format for Microsoft Streets and Trips.   Detailed
	instructions on how to import to it, preserving hyperlinks, are at

	http://gpsbabel.sourceforge.net/formats/s_and_t/Importing_into_Microsoft_Streets_and_Trips_2003.html

    Gcdb

	This is the GeocachingDB by DougsBrat.  It works with v2 and v3
	of this program.

	http://vip.hyperusa.com/~dougs/geocachingdb/geocachingdb.htm

    NIMA

	This is a CSV format from the National Imagery and Mapping Agency.

    Fugawi

	This was a requested CSV format.   It's unknown which version of
	which software it works with.

	http://www.fugawi.com/

    custom

	This is a "kitchen sink" CSV format.   No known program will
	read it, but it's handy for simply converting an arbitrary file
	to text so it can be pulled into a spreadsheet or manipulated
	with text processing tools.

    tabsep

	Dumps all fields in a traditional Unix tab separated style.

    mapconverter

	Mapconverter is a format this is read by Mapopolis.com's mapconverter
	application.  Full details of it's usage are available in the file
	README.mapconverter.

    navicache

	This is the XML format that's used by Navicache.com for their
	geocaching data.  There are a number of fields in it that are 
	marked "required" but are Navicache-specific, so GPSBabel can not
	write these files, but we can still read them.

	http://www.navicache.com/cgi-bin/ib312a/ikonboard.cgi?act=ST;f=23;t=334

DATA FILTERS

	GPSBabel supports data filtering.  Data filters are invoked from
	the command line via the '-x' option.  It should be noted that
	data filters are invoked in the order they appear on the command
	line and can be used in intermittently between several variations
	of input and output functions.  It should also be noted that
	filtering data from different input types can sometimes produce
	undesirable results due to differences in the native data formats.


    POSITION

	The position filter is designed to remove points based on their
	proximity to each other.  Distances can be passed on the command 
	line by passing the distance=XXX option to the filter.  Distance
	options may be expressed in feet (distance=3f) or meters 
	(distance=1m).  The default is zero feet, essentially a duplicate
	position.  

	For example:

	gpsbabel -i geo -f 1.loc -f 2.loc -x position,distance=1f \
	         -o mapsend -F 3.wpt

	would remove multiple points that are within 1 foot of each other,
	leaving just one.


    RADIUS

	The radius filter is designed to include points based on their
	proximity to a central point.  Distances and the central point 
	are declared on the command line by passing the distance=X.XX,
	lat=X.XX, and lon=X.XX options to the filter.  Distance options 
	may be expressed in miles (distance=3M) or kilometers (distance=3K).
	The default is zero miles.  Additionally, the exclude option may 
        be specified to reverse the effect of the filter, so that points 
        further from the center are kept and closer points are discarded.

	For example:

	gpsbabel -i geo -f 1.loc -x radius,distance=1.5M,lat=30.0,lon=-90.0 \
	         -o mapsend -F 2.wpt

	would include only points within 1.5 miles of N30.000 W90.000 


    DUPLICATE

	The duplicate filter is designed to remove duplicate points based
	on their shortname (traditionally a waypoint's name on the GPS
	receiver), and/or their location (to a precision of 6 decimals).
	This filter supports two options, "shortname" and "location".
	Generally, at least one of these options is REQUIRED.  For example:

	gpsbabel -i gpx -f 1.gpx -f 2.gpx -x duplicate,location,shortname \
	         -o gpx -F merged_with_no_dupes.gpx

	would remove points that have duplicate shortnames *AND* duplicate
	locations.  The result would be a GPX file that more than likely
	contains only unique points and point data.

    DISTANCE ALONG A ROUTE (ARC)
    ARC

        The arc filter is designed to include points based on their
        proximity to an arc, which is a series of connected line
        segments similar to a route or a track but without any
        associated data other than the coordinates.

        The arc is defined in a file whose name must be provided with
        the file=XXXX option to the filter.  That file contains pairs
        of coordinates for the vertices of the arc, one coordinate pair
        per line.  Comments may be included by preceding them with a '#'
        character.  An arc file looks something like this sample:

	  # Lima Road/SR3 north of Fort Wayne, Indiana
	  41.150064468    -85.166207433
	  41.150064468    -85.165371895
	  41.149034500    -85.165157318
	  41.147832870    -85.164771080
	  41.146631241    -85.164384842
	  41.144270897    -85.163655281
	  41.141953468    -85.162882805

        In addition to the file containing the arc, you should also
        specify the maximum distance from the arc that will be accepted;
        that distance is declared on the command line with the
        distance=X.XX option to the filter.  Distance options may be
        expressed in miles (distance=3M) or kilometers (distance=3K).
        The default is zero miles.  You may also specify the exclude option,
        which causes GPSBabel to only include points that are further than
        the specified distance from the arc.

	For example, assuming the arc above is in a file called "lima_rd.txt":

	gpsbabel -i geo -f 1.loc -x arc,file=lima_rd.txt,distance=1 \
		-o mapsend -F 2.wpt

	would include only points within one mile of the section of Lima Road
	covered by the arc.

    POLYGON

        The polygon filter includes points if they are inside of a polygon.
        A polygon file looks like an arc file, except that the arc it 
        describes must be a closed cycle.  That is, for a simple polygon,
        the first and last points must be the same.  Here's a square:

          # A square (not really) polygon
          41.0000       -85.0000
          41.0000       -86.0000
          42.0000       -86.0000
          42.0000       -85.0000
          41.0000       -85.0000

        Polygons may include islands and holes.  To specify an island or a 
        hole, just append it to the main polygon.

        As with the arc filter, you specify a polygon by specifying the name
        of the polygon that contains it, using the file option.  You can also
        specify the exclude option, which reverses the operation of the filter
        so that it only includes points that are NOT in the polygon.

        Note that this filter currently will not work properly if your polygon 
        contains one or both poles or if it spans the line of 180 degrees 
        east or west longitude.  

        For example, assume you have a polygon file that defines the border of
        your county, called mycounty.txt.  This command line will give you only 
        the points in your county:

	gpsbabel -i geo -f 1.loc -x polygon,file=mycounty.txt \
	  	 -o mapsend -F 2.wpt

COMMON USAGE

	Invocation was meant to be flexible.   Unfortunately, that can
	sometimes lead to unwieldy command lines.

		gpsbabel -? 

	will always show you the supported file types.   To use this
	program, just tell it what you're reading, where to read it from,
	what you're writing, and what to write it to.  For example:

	gpsbabel -i geo -f /tmp/geocaching.loc -o gpx -F /tmp/geocaching.gpx

	tells it to read the first file in geocaching.com format and create
	a new file in GPX format.

	This command will read from a Magellan unit attached to the first
	serial port on a Linux system (device names will vary on other OSes)
	and write them as a geocaching loc file.  The second command does 
	the same for windows.

	gpsbabel -i magellan -f /dev/ttyS0 -o geo -F mag.loc
	gpsbabel -i magellan -f com1 -o geo -F mag.loc
	

	Optionally, you may specify "-s" in any command line.  This causes
	the program to ignore any "short" names that may be present in the
	source data format and synthesize one from the long name.  This
	is particularly useful if you're writing to a target format that 
	isn't the lowest common denominator but the source data was written
	for the lowest common denominator.   I use this for writing data
	from geocaching.com to my Magellan so my waypoints have "real" names
	instead of the 'GC1234' ones that are optimized for NMEA-only 
	receivers.   A geocacher with a Magellan receiver may thus find
	commands like this useful.

	gpsbabel -s -i geo -f geocaching.loc -o magellan -F /dev/ttyS0 
	gpsbabel -s -i geo -f geocaching.loc -o magellan -F com1

ADVANCED USAGE

	Argument are processed in the order they appear on the command line.
	Input is cumulative.  The input file type remains unchanged until a 
	new -i argument is seen.  Files are read in the order they appear.  
	So you could merge three input files into one output file with:
	
	gpsbabel -i geo -f 1.loc -f 2.loc -f 3.loc -o geo -F big.loc

	You can merge files of different types:

	gpsbabel  -i geo -f 1.loc -i gpx -f 2.gpx -i pcx 3.pcx -o gpsutil -F big.gps

	You can write the same data in different output formats:

	gpsbabel -i geo -f 1.loc -o gpx -F 1.gpx -o pcx 1.wpt
