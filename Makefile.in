#
# Build file for GPSBabel.
# Makefile is generated from Makefile.in by autoconf which does several
# text substitutions such version numbers and object paths for us.
#
# GPSBabel requires a reasonably recent version of GNU Make.
# We rely on very few fancy features of make so the exact version
# probably doesn't much matter.  GNU Make 3.81 seems a reasonable target.
#

srcdir = @srcdir@
VPATH = @srcdir@
builddir = @builddir@

# when srcdir and builddir are different we need to get config.h from builddir.
ifeq ($(srcdir), $(builddir))
BUILD_CPP = -I$(srcdir)
else
BUILD_CPP = -I$(builddir) -I$(srcdir)
endif

# version and release are defined in the head of configure.ac
# don't forget 'autoconf' if you change them
VERSD=@GBMAJOR@.@GBMINOR@.@GBMICRO@
VERSU=@GBMAJOR@_@GBMINOR@_@GBMICRO@
RELEASE=@PACKAGE_RELEASE@

VERSIOND=$(VERSD)$(RELEASE)
VERSIONU=$(VERSU)$(RELEASE)

DOCVERSION=@DOCVERSION@
DOCVERSION=development

CC=@CC@
CXX=@CXX@
EXEEXT=@EXEEXT@

# Resource compiler, currently used under MinGW
RC=@RC@

# Space is significant, because MSVC wants no space between switch and arg (-Fofoo.o)
# but cc/gcc does:
#  $(OUTPUT_SWITCH)main.o
#  becomes -o main.o (gcc)
#   or     -Fomain.o (cl.exe) (currently unused)
OUTPUT_SWITCH=-o #

QT_INC=@QT_INC@
QT_LIBS=@QT_LIBS@
QMAKE=@QMAKE@
LUPDATE=@LUPDATE@
LRELEASE=@LRELEASE@

#
# Enable either or both of these as you wish.
#
#OPTIMIZATION=-O $(EXTRA_OPTIMIZATION)
#DEBUGGING=-g $(EXTRA_DEBUGGING)
GBCFLAGS=$(EXTRA_CFLAGS) $(DEBUGGING) $(BUILD_CPP) @ZLIB_CPP@ @QT_SYSINC_OPT@$(QT_INC) \
	$(OPTIMIZATION) -DHAVE_CONFIG_H -DNEW_STRINGS
LDFLAGS=$(EXTRA_LDFLAGS) @LDFLAGS@
PREFIX=@prefix@
INSTALL_DIR=$(DESTDIR)/$(PREFIX)

MINIMAL_FMTS=magproto.o gpx.o geo.o mapsend.o mapsource.o garmin.o \
	garmin_device_xml.o garmin_tables.o internal_styles.o nmea.o kml.o \
	wbt-200.o ozi.o pcx.o gdb.o gtrnctr.o xcsv.o explorist_ini.o

ALL_FMTS=$(MINIMAL_FMTS) gtm.o gpsutil.o \
	skytraq.o \
	holux.o tmpro.o tpg.o tpo.o \
	tiger.o easygps.o \
	saroute.o navicache.o psitrex.o delgpl.o \
	text.o html.o netstumbler.o \
	igc.o brauniger_iq.o shape.o hiketech.o glogbook.o \
	vcf.o lowranceusr.o an1.o tomtom.o \
	tef_xml.o maggeo.o vitosmt.o bcr.o \
	ignrando.o stmwpp.o cst.o nmn4.o compegps.o \
	yahoo.o unicsv.o wfff_xml.o garmin_txt.o gpssim.o \
	stmsdf.o dmtlog.o raymarine.o alan.o vitovtt.o \
	ggv_log.o g7towin.o garmin_gpi.o lmx.o random.o xol.o dg-100.o \
	navilink.o mtk_logger.o ik3d.o osm.o destinator.o exif.o vidaone.o \
	igo8.o gopal.o humminbird.o mapasia.o gnav_trl.o navitel.o ggv_ovl.o \
	jtr.o sbp.o sbn.o mmo.o skyforce.o itracku.o v900.o \
	pocketfms_bc.o pocketfms_fp.o pocketfms_wp.o naviguide.o enigma.o \
	vpl.o teletype.o jogmap.o bushnell.o bushnell_trl.o wintec_tes.o \
	subrip.o garmin_xt.o garmin_fit.o \
	mtk_locus.o googledir.o mapbar_track.o f90g_track.o mapfactor.o energympro.o \
	mynav.o ggv_bin.o globalsat_sport.o geojson.o

FMTS=@FMTS@

FILTERS=bend.o position.o radius.o duplicate.o arcdist.o polygon.o smplrout.o \
	reverse_route.o sort.o stackfilter.o trackfilter.o discard.o \
	nukedata.o interpolate.o transform.o height.o swapdata.o validate.o

JEEPS=jeeps/gpsapp.o jeeps/gpscom.o \
	jeeps/gpsmath.o jeeps/gpsmem.o \
	jeeps/gpsprot.o jeeps/gpsread.o \
	jeeps/gpsdevice.o jeeps/gpsdevice_ser.o jeeps/gpsdevice_usb.o \
	jeeps/gpsrqst.o jeeps/gpssend.o jeeps/gpsserial.o jeeps/jgpsutil.o \
	jeeps/gpsusbread.o jeeps/gpsusbsend.o \
	jeeps/gpsusbcommon.o @OSJEEPS@

# Extra modules in Jeeps that we don't use
# 	jeeps/gpsfmt.o jeeps/gpsinput.o jeeps/gpsproj.o

SHAPE=shapelib/shpopen.o shapelib/dbfopen.o shapelib/safileio.o

MINIZIP=zlib/contrib/minizip/zip.o \
	zlib/contrib/minizip/ioapi.o

ZLIB=zlib/adler32.o zlib/compress.o zlib/crc32.o zlib/deflate.o zlib/inffast.o \
	zlib/inflate.o zlib/infback.o zlib/inftrees.o zlib/trees.o \
	zlib/uncompr.o zlib/gzlib.o zlib/gzclose.o zlib/gzread.o \
	zlib/gzwrite.o zlib/zutil.o


LIBOBJS = queue.o route.o waypt.o filter_vecs.o util.o vecs.o mkshort.o \
	csv_util.o strptime.o grtcirc.o util_crc.o xmlgeneric.o \
	formspec.o xmltag.o cet.o cet_util.o fatal.o rgbcolors.o \
	inifile.o garmin_fs.o units.o @GBSER@ gbser.o \
	gbfile.o parse.o session.o \
	src/core/xmlstreamwriter.o \
	src/core/usasciicodec.o\
	src/core/ziparchive.o \
	$(GARMIN) $(JEEPS) $(SHAPE) @ZLIB@ @MINIZIP@ $(FMTS) $(FILTERS)
OBJS = main.o globals.o $(LIBOBJS) @FILEINFO@

DEPFILES = $(OBJS:.o=.d)

.cc.o:
	$(CXX) @CPPFLAGS@ @CXXFLAGS@ -c $(GBCFLAGS) $< $(OUTPUT_SWITCH)$@
.c.o:
	$(CC) @CPPFLAGS@ @CFLAGS@ -c $(GBCFLAGS) $< $(OUTPUT_SWITCH)$@

%.d: %.cc
	$(CXX) -MM -MP -MT "$(@:.d=.o) $@" -MF $@ @CPPFLAGS@ @CXXFLAGS@ $(GBCFLAGS) $<

%.d: %.c
	$(CC) -MM -MP -MT "$(@:.d=.o) $@" -MF $@ @CPPFLAGS@ @CFLAGS@ $(GBCFLAGS) $<



# Directory of local web doc.  Traditionally a sibling to the GPSBabel tree.
WEB=@DOCDIR@

# Declaring a target PHONY whose names matches a subdirectory can be
# particularly important, e.g. gui.
.PHONY: all clean tag more-clean check torture \
install install-debug \
doc \
release-sourcecheck release-tarball release-rpm \
cross-configure \
release-winbuild release-upload mac-upload release rpm mac-release \
gui linux-gui mac-gui mac-gui-dmg msvc-build test-release \
toolinfo

all: gpsbabel$(EXEEXT)

gpsbabel$(EXEEXT): configure Makefile $(OBJS) @GPSBABEL_DEBUG@
	$(CXX) $(CXXFLAGS) $(LDFLAGS) $(OBJS) @LIBS@ $(QT_LIBS) @USB_LIBS@ $(OUTPUT_SWITCH)$@

gpsbabel-debug: $(OBJS)
	$(CXX) $(CXXFLAGS) $(LDFLAGS) $(OBJS) @LIBS@ $(QT_LIBS) @USB_LIBS@ $(OUTPUT_SWITCH)$@

Makefile gbversion.h: Makefile.in config.status xmldoc/makedoc.in \
	  gbversion.h.in gui/setup.iss.in
	CONFIG_FILES=$@ CONFIG_HEADERS= $(SHELL) ./config.status

xcsv_tokens.gperf: xcsv_tokens.in
	gperf --output-file=$@ -L C++ -D -t $?

config.status: configure
	$(SHELL) config.status --recheck

jeeps/gpslibusb.o:
	$(CXX) @CPPFLAGS@ @CXXFLAGS@ -c $(GBCFLAGS) @USB_CFLAGS@ @srcdir@/jeeps/gpslibusb.cc $(OUTPUT_SWITCH)$@

fileinfo.o: win32/gpsbabel.rc
	$(RC) -o fileinfo.o win32/gpsbabel.rc

clean:
	rm -f $(OBJS) gpsbabel gpsbabel.exe
	rm -f $(DEPFILES)
	if [ -f gui/Makefile ]; then $(MAKE) -C gui clean; fi
	$(srcdir)/test-all -W

configure: configure.ac
	autoconf

tag:
	# svn commit
	# svn copy https://gpsbabel.googlecode.com/svn/trunk/ https://gpsbabel.googlecode.com/svn/tags/gpsbabel_@GBMAJOR@_@GBMINOR@_@GBMICRO@@PACKAGE_RELEASE@
	git tag -fa gpsbabel_@GBMAJOR@_@GBMINOR@_@GBMICRO@@PACKAGE_RELEASE@ -m "gpsbabel_@GBMAJOR@_@GBMINOR@_@GBMICRO@@PACKAGE_RELEASE@"
	git push origin master --tags

more-clean: clean
	$(srcdir)/tools/mkmoreclean

check: gpsbabel$(EXEEXT)
	$(srcdir)/testo

torture: gpsbabel$(EXEEXT)
	@echo "testo in progress... (basic data integrity test)"
	@$(srcdir)/testo
	@echo "vtesto in progress... (valgrind is watching testo)"
	@$(srcdir)/vtesto
	@echo "torture_test in progress... (shortname reduction)"
	@$(srcdir)/torture_test
#
# 	Because there are some "non-real" errors like "IGC: bad date"
# 	test-all does not stop on errors.
# 	Please inspect the log file (/tmp/gb-test-all.log) for segmentation
# 	faults, math overflows and other hard errors
#
	@echo "test-all in progress... (read/write test between all possible formats)"
	@$(srcdir)/test-all -s -r $(srcdir)/reference/expertgps.gpx -t

#
# This will only work on UNIX-like substances.
#
install: @INSTALL_DEBUG@ gpsbabel$(EXEEXT)
	@mkdir -p $(INSTALL_DIR)/bin
	install gpsbabel $(INSTALL_DIR)/bin/

install-debug:
	@mkdir -p $(INSTALL_DIR)/bin
	install gpsbabel-debug $(INSTALL_DIR)/bin/

# Nerdy release stuff that needs to work only on Linux.

$(WEB)/htmldoc-$(DOCVERSION)/index.html: FORCE
	mkdir -p $(WEB)/htmldoc-$(DOCVERSION)
	perl xmldoc/makedoc
	xmlwf xmldoc/readme.xml		#check for well-formedness
	xmllint --noout --valid xmldoc/readme.xml	#validate
	xsltproc --load-trace \
	 --stringparam base.dir "$(WEB)/htmldoc-$(DOCVERSION)/" \
	 --stringparam root.filename "index" \
	 xmldoc/babelmain.xsl \
	 xmldoc/readme.xml
	tools/fixdoc $(WEB)/htmldoc-$(DOCVERSION) "GPSBabel $(DOCVERSION):"
	chmod 755 tools/mkcapabilities
	tools/mkcapabilities

#
# The .fo and PDF versions depend on additional tools.
# 'fop' must be obtained from http://xmlgraphics.apache.org/fop/
#   0.92beta seems to work OK, BUT.
#   * If you have a package called 'docbook-xml-website' it's reported
#     to prevent the build from working.  Remove it. (Suse)
#   * Sun Java seems to be required.  GCJ 1.4.2 doesn't work.  You can
#     force Sun Java to be used by creating ~/.foprc with 'rpm_mode=' (Fedora)
#     Get it from http://www.java.com
# The Hyphenation package must be installed from
#   http://offo.sourceforge.net/hyphenation/index.html - be sure to get the
#   version that corresponds to the version of FOP that you used above.
# The docbook XSL must be 1.71.1 or higher.
#   * Remember to update /etc/xml/catalogs if you manually update this.
#
gpsbabel.fo: FORCE
	perl xmldoc/makedoc
	xmlwf xmldoc/readme.xml		#check for well-formedness
	xmllint --noout --valid xmldoc/readme.xml	#validate
	xsltproc --load-trace -o $@ xmldoc/babelpdf.xsl xmldoc/readme.xml

gpsbabel.pdf: gpsbabel.fo
	fop -q -fo gpsbabel.fo -pdf gpsbabel.pdf
	cp gpsbabel.pdf $(WEB)/htmldoc-$(DOCVERSION)/gpsbabel-$(DOCVERSION).pdf


gpsbabel.html: FORCE # gpsbabel
	# perl xmldoc/makedoc
	xsltproc --load-trace \
	  --output $@ \
	  --stringparam toc.section.depth "1" \
	  --stringparam html.cleanup "1" \
	  --stringparam make.clean.html "1" \
	  --stringparam html.valid.html "1" \
	  --stringparam html.stylesheet \
	  "http://www.gpsbabel.org/style3.css" \
	  http://docbook.sourceforge.net/release/xsl/current/xhtml/docbook.xsl \
	xmldoc/readme.xml

readme.txt: gpsbabel.html
	lynx -nolist -dump gpsbabel.html > $@

changes.html: FORCE
	wget -O $(WEB)/changes.html http://www.gpsbabel.org/changes.html || exit 1
	rm -f $(WEB)/changes.html.1 > /dev/null

doc: gpsbabel $(WEB)/htmldoc-$(DOCVERSION)/index.html gpsbabel.pdf # readme.txt

FORCE:

# file list for windows package
WINFILES = gpsbabel.exe win32/GPSBabelGUI.exe win32/gui-2/README.gui \
	README.contrib AUTHORS COPYING gpsbabel.html

#
# Do administrative-y things to the tree.  Verify that everything is checked
# in and tagged.
#
release-sourcecheck: changes.html
	# ./chkdoc
	# make clean
	rm -fr gpsbabel-$(VERSIOND)
	# make gpsbabel doc gpsbabel.html
	@(. tools/functions && ask "Enter 'y' to tag the tree as gpsbabel_$(VERSIONU)." "y") && git tag -fa gpsbabel_@GBMAJOR@_@GBMINOR@_@GBMICRO@@PACKAGE_RELEASE@ -m "gpsbabel_@GBMAJOR@_@GBMINOR@_@GBMICRO@@PACKAGE_RELEASE@"
	# svn export https://gpsbabel.googlecode.com/svn/tags/gpsbabel_$(VERSIONU)/gpsbabel gpsbabel-$(VERSIOND)
	# May have to rethink this in a Git world.
	# touch gpsbabel-$(VERSIOND)/internal_styles.cc
	# touch gpsbabel-$(VERSIOND)/configure
	# touch gpsbabel-$(VERSIOND)/xcsv_tokens.gperf

#
# Build the release tarball from the exported CVS tree, tweaking
# timestamps and including generated filess as needed.
#
release-tarball: release-sourcecheck
#	rm -fr gpsbabel-$(VERSIOND)
	# cp -ap internal_styles.cc gpsbabel-$(VERSIOND)/
	# tar czf /tmp/gpsbabel-$(VERSIOND).tar.gz gpsbabel-$(VERSIOND)
	git archive --prefix=gpsbabel-$(VERSIOND)/ HEAD | gzip > /tmp/gpsbabel-$(VERSIOND).tar.gz
	gb_upload /tmp/gpsbabel-$(VERSIOND).tar.gz
#	cd /tmp ; tar xzf gpsbabel-$(VERSIOND).tar.gz

release-rpm:
	test -f gpsbabel.html
	mkdir -p /tmp/dist/BUILD \
	  /tmp/dist/RPMS /tmp/dist/SPECS \
	  /tmp/dist/SOURCES /tmp/dist/SRPMS \
	  /tmp/dist/TMP /tmp/dist/install
	tools/mkspec $(WEB) $(VERSD) $(RELEASE) > /tmp/dist/SPECS/gpsbabel.spec
	cp -ap gpsbabel.html gpsbabel-$(VERSIOND)/
	cp -ap CHANGELOG gpsbabel-$(VERSIOND)/
	rm -rf /tmp/dist/TMP/gpsbabel-$(VERSD)
	rm -rf /tmp/dist/SOURCES/gpsbabel-$(VERSD).tgz
	cp -apr gpsbabel-$(VERSIOND) /tmp/dist/TMP/gpsbabel-$(VERSD)
	cd /tmp/dist/TMP ; tar --owner=0 --group=0 -czf ../SOURCES/gpsbabel-$(VERSD).tgz gpsbabel-$(VERSD)
	rpmbuild -ba \
	  --define "_topdir /tmp/dist" \
	  --define "buildroot /tmp/dist/install" \
	  /tmp/dist/SPECS/gpsbabel.spec


#
# The Windows executables are cross compiled from the exported CVS image.
# Do the build of that here and make a zip file for distribution.
# Do this build in a temporary tree that was a copy of the tagged one
# to avoid scribbling in the "real" one.
#
# The cross builds are built with mingw.  http://mirzam.it.vu.nl/mingw
# and http://mingw.sourceforge.net are convenient sources for that.
# binutils, runtime, w32api, and gcc-core seem to be required.
#

cross-configure:
	CXX=i386-mingw32-gcc LDFLAGS="-s" @srcdir@/configure --host=i386-pc-mingw32

release-winbuild:
	rm -fr /tmp/gpsbabel-$(VERSIOND)-cross
	cp -a gpsbabel-$(VERSIOND) /tmp/gpsbabel-$(VERSIOND)-cross
	cd /tmp/gpsbabel-$(VERSIOND)-cross ; \
	  CXX=i386-mingw32-gcc LDFLAGS="-s" ./configure --host=i386-pc-mingw32 && make && \
	  zip -j /tmp/gpsbabel-$(VERSIOND).zip $(WINFILES)
	rm -fr /tmp/gpsbabel-$(VERSIOND)-cross

# gb_upload is an external script to do the copy to the server.
release-upload: /tmp/gpsbabel-$(VERSIOND).tar.gz /tmp/gpsbabel-$(VERSIOND).zip /tmp/dist/SRPMS/gpsbabel-$(VERSIOND)-0.src.rpm /tmp/dist/RPMS/i386/gpsbabel-$(VERSIOND)-0.i386.rpm
	@(. tools/functions && ask "Type 'yes' if you want to do the upload now" "yes" )
	gb_upload /tmp/gpsbabel-$(VERSIOND).tar.gz
	gb_upload /tmp/gpsbabel-$(VERSIOND).zip
	gb_upload /tmp/dist/SRPMS/gpsbabel-$(VERSIOND)-0.src.rpm
	gb_upload /tmp/dist/RPMS/i386/gpsbabel-$(VERSIOND)-0.i386.rpm
	gb_upload /tmp/dist/RPMS/i386/gpsbabel-debuginfo-$(VERSIOND)-0.i386.rpm

mac-upload:
	# gb_upload GPSBabel+-$(VERSIOND).dmg
	gb_upload gui/objects/GPSBabel-$(VERSIOND).dmg


release: release-sourcecheck release-tarball release-winbuild release-rpm release-upload

rpm: changes.html
	tools/mkrpm $(WEB) $(VERSD) $(RELEASE)

gui: gpsbabel$(EXEEXT)
	cd gui ; $(QMAKE) app.pro && $(MAKE) $(MAKEFLAGS)
	cd gui ; $(LUPDATE) app.pro
	cd gui ; $(LRELEASE) app.pro

linux-gui: gui
	cd gui; ./makelinuxdist.sh

mac-gui: gui
	# file gpsbabel | grep '2 architectures' || exit 1
	# file gui/objects/GPSBabelFE.app/Contents/MacOS/GPSBabelFE | grep '2 architectures' || exit 1
	mkdir -p gui/objects/GPSBabelFE.app/Contents/MacOS/translations
	cp gui/*.qm gui/objects/gpsbabelFE.app/Contents/MacOS/translations
	cp gpsbabel gui/objects/GPSBabelFE.app/Contents/MacOS
	cp -r gui/help/*.html gui/objects/GPSBabelFE.app/Contents/MacOS
	cp gui/gmapbase.html gui/objects/GPSBabelFE.app/Contents/MacOS
	tools/mac-localize

# Build the Qt front end, place GPSBabel in the right place, deploy all
# the libs.

mac-gui-dmg: mac-gui
	rm -f gui/objects/GPSBabelFE.dmg
	cd gui/objects ; macdeployqt GPSBabelFE.app -executable=GPSBabelFE.app/Contents/MacOS/gpsbabel -dmg
	mv gui/objects/GPSBabelFE.dmg gui/objects/GPSBabel-$(VERSIOND).dmg

msvc-build:
	@#Intended for development. Assume .NET 4 is used - may require tweaks
	"$(word 1, $(wildcard $(SYSTEMROOT)/Microsoft.NET/Framework/v4*/msbuild.exe))" msvc/GPSBabel.vcxproj /nologo /maxcpucount

# release check using CVS tree
test-release: doc gpsbabel.html changes.html
	cvs export -r HEAD -d gpsbabel-$(VERSIOND) gpsbabel
	rm -f gpsbabel-$(VERSIOND)/internal_styles.cc
	make release-tarball release-winbuild release-rpm

# Build entire tree, upload to Coverity.
cov-upload: FORCE
	make clean
	cov-build --dir cov-int make
	echo If that says 100%, press enter. Otherwise interrupt.
	read junk
	cov-upload

toolinfo:
	-$(CC) --version
	-$(QMAKE) -v

internal_styles.cc: mkstyle.sh $(srcdir)/style/*.style
	$(srcdir)/mkstyle.sh > internal_styles.cc || (rm -f internal_styles.cc ; exit 1)

ifneq ($(MAKECMDGOALS),clean)
ifneq ($(MAKECMDGOALS),more-clean)
ifneq ($(MAKECMDGOALS),toolinfo)
-include $(DEPFILES)
endif
endif
endif
